/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fsmprototype;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.Enumeration;
import java.util.Scanner;
import javax.swing.JTree;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

/**
 *
 * @author Alvin Lu
 */
public class Main_Edit extends javax.swing.JFrame {

    protected static Game g;
    
    public Main_Edit() {
        DefaultListModel<String> model = new DefaultListModel<>();
        g = MainMenu.game;
        for(Room r:g.getRooms()){
            model.addElement(r.getName());
        }
        initComponents();  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        object = new javax.swing.JButton();
        room = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        play_game = new javax.swing.JButton();
        info = new javax.swing.JTabbedPane();
        Main_Panel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        objectName = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        description = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        exit = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        Exits = new javax.swing.JTable();
        create_exit_form = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        exit_name = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        exit_room = new javax.swing.JTextField();
        create_exit = new javax.swing.JButton();
        create_exit_form1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        remove_exit_name = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        remove_exit = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        Current_Game = new javax.swing.JTree();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menu_File_Save = new javax.swing.JMenuItem();
        menu_File_Open = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();

        jLabel1.setText("Name:");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setRollover(true);

        object.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        object.setText("Create Object    ");
        object.setFocusable(false);
        object.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        object.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        object.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                objectMouseClicked(evt);
            }
        });
        jToolBar1.add(object);

        room.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        room.setText("Create room");
        room.setFocusable(false);
        room.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        room.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        room.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roomMouseClicked(evt);
            }
        });
        jToolBar1.add(room);

        delete.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        delete.setText("     Delete");
        delete.setFocusable(false);
        delete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        delete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        delete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteMouseClicked(evt);
            }
        });
        jToolBar1.add(delete);

        play_game.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        play_game.setText("      Play");
        play_game.setFocusable(false);
        play_game.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        play_game.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        play_game.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                play_gameMouseClicked(evt);
            }
        });
        jToolBar1.add(play_game);

        jLabel2.setText("Name");

        objectName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                objectNameFocusLost(evt);
            }
        });
        jScrollPane2.setViewportView(objectName);

        description.setColumns(20);
        description.setRows(5);
        description.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                descriptionFocusLost(evt);
            }
        });
        jScrollPane3.setViewportView(description);

        jLabel3.setText("Description");

        jLabel4.setText("Attributes");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Type", "Default value"
            }
        ));
        jScrollPane4.setViewportView(jTable1);

        javax.swing.GroupLayout Main_PanelLayout = new javax.swing.GroupLayout(Main_Panel);
        Main_Panel.setLayout(Main_PanelLayout);
        Main_PanelLayout.setHorizontalGroup(
            Main_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Main_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Main_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(Main_PanelLayout.createSequentialGroup()
                        .addGroup(Main_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(31, 31, 31)
                        .addGroup(Main_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 827, Short.MAX_VALUE)
                            .addComponent(jScrollPane2)))
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 962, Short.MAX_VALUE))
                .addContainerGap(230, Short.MAX_VALUE))
        );
        Main_PanelLayout.setVerticalGroup(
            Main_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Main_PanelLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(Main_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(Main_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                .addContainerGap())
        );

        info.addTab("Information", Main_Panel);

        Exits.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Room", "Exit name"
            }
        ));
        jScrollPane6.setViewportView(Exits);

        jLabel5.setText("Add Exit");

        exit_name.setText("Exit name");

        jLabel6.setText("Exit name");

        jLabel7.setText("Exit room");

        exit_room.setText("Exit room");

        create_exit.setText("Create exit");
        create_exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                create_exitMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout create_exit_formLayout = new javax.swing.GroupLayout(create_exit_form);
        create_exit_form.setLayout(create_exit_formLayout);
        create_exit_formLayout.setHorizontalGroup(
            create_exit_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(create_exit_formLayout.createSequentialGroup()
                .addGroup(create_exit_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(create_exit_formLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel5))
                    .addGroup(create_exit_formLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exit_name, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(create_exit_formLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(create_exit_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(create_exit_formLayout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(exit_room))
                            .addComponent(create_exit))))
                .addContainerGap(292, Short.MAX_VALUE))
        );
        create_exit_formLayout.setVerticalGroup(
            create_exit_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(create_exit_formLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(24, 24, 24)
                .addGroup(create_exit_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(exit_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(create_exit_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(exit_room, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(create_exit)
                .addContainerGap(66, Short.MAX_VALUE))
        );

        jLabel8.setText("Remove Exit");

        remove_exit_name.setText("Exit name");

        jLabel9.setText("Exit name");

        remove_exit.setText("Remove exit");
        remove_exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                remove_exitMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout create_exit_form1Layout = new javax.swing.GroupLayout(create_exit_form1);
        create_exit_form1.setLayout(create_exit_form1Layout);
        create_exit_form1Layout.setHorizontalGroup(
            create_exit_form1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(create_exit_form1Layout.createSequentialGroup()
                .addGroup(create_exit_form1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(create_exit_form1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel8))
                    .addGroup(create_exit_form1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(remove_exit_name, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(create_exit_form1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(remove_exit)))
                .addContainerGap(277, Short.MAX_VALUE))
        );
        create_exit_form1Layout.setVerticalGroup(
            create_exit_form1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(create_exit_form1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addGap(24, 24, 24)
                .addGroup(create_exit_form1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(remove_exit_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(65, 65, 65)
                .addComponent(remove_exit)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout exitLayout = new javax.swing.GroupLayout(exit);
        exit.setLayout(exitLayout);
        exitLayout.setHorizontalGroup(
            exitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exitLayout.createSequentialGroup()
                .addGroup(exitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, exitLayout.createSequentialGroup()
                        .addComponent(jScrollPane6)
                        .addGap(49, 49, 49))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, exitLayout.createSequentialGroup()
                        .addComponent(create_exit_form, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(create_exit_form1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(51, 51, 51))
        );
        exitLayout.setVerticalGroup(
            exitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exitLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(exitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(create_exit_form, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(create_exit_form1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(109, 109, 109))
        );

        info.addTab("Exits", exit);

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Start state", "End state", "Conditions"
            }
        ));
        jScrollPane8.setViewportView(jTable4);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1213, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 1213, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 654, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 654, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        info.addTab("States", jPanel4);

        DefaultMutableTreeNode game = new DefaultMutableTreeNode("Game");
        updateTree();
        Current_Game.setFont(new java.awt.Font("Tahoma", 0, 25)); // NOI18N
        Current_Game.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                Current_GameValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(Current_Game);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 673, Short.MAX_VALUE)
                .addContainerGap())
        );

        menuFile.setText("File");

        menu_File_Save.setText("Save");
        menu_File_Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_File_SaveActionPerformed(evt);
            }
        });
        menuFile.add(menu_File_Save);

        menu_File_Open.setText("Open");
        menu_File_Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_File_OpenActionPerformed(evt);
            }
        });
        menuFile.add(menu_File_Open);

        menuBar.add(menuFile);

        menuEdit.setText("Edit");
        menuBar.add(menuEdit);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 1466, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(info))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(info, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void objectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_objectMouseClicked
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode)Current_Game.getLastSelectedPathComponent();
        if(selectedNode == null){
            JOptionPane.showMessageDialog(Main_Panel, "Please select a room to create Object!", "Inane warning", JOptionPane.WARNING_MESSAGE);
        }
        else if(selectedNode.getUserObject() instanceof Room){
            String[] possibilities = {"Player", "Human", "Pickable object", "Container"};
            String s = (String)JOptionPane.showInputDialog(
                    Main_Panel,
                    "Type of item:\n",
                    "Choose item type",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    possibilities,
                    possibilities[2]);
            Room r = (Room)selectedNode.getUserObject();
            if(s != null){
                switch(s){
                    case "Player":
                        if(g.getPlayer() == null){
                            Player p = new Player("Player", r);
                            g.addPlayer(p);
                            g.addObjectToRoom(r, p);
                            updateTree();
                            break;
                        } 
                    case "Human":
                        Human h = new Human("Human");
                        g.addObjectToRoom(r, h);
                        updateTree();
                        break;

                    case "Pickable object":
                        Pick_Able_Object o = new Pick_Able_Object("Object");
                        g.addObjectToRoom(r, o);
                        updateTree();
                        break;

                    case "Container":
                        Container c = new Container("Object");
                        g.addObjectToRoom(r, c);
                        updateTree();
                        break;
                }
            }
        }
        else if(selectedNode.getUserObject() instanceof Container){
            String[] possibilities = {"Pickable object", "Container", "Usable object"};
            String s = (String)JOptionPane.showInputDialog(
                    Main_Panel,
                    "Type of item:\n",
                    "Choose item type",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    possibilities,
                    "Pickable object");
            Container con = (Container)selectedNode.getUserObject();
            if(s != null){
                switch(s){
                    case "Pickable object":
                        Pick_Able_Object o = new Pick_Able_Object("Object");
                        con.addObjects(o);
                        updateTree();
                        break;

                    case "Container":
                        Container c = new Container("Container");
                        con.addObjects(c);
                        updateTree();
                        break;           
                } 
            }
        }
        
        else if(selectedNode.getUserObject() instanceof Player){
            String[] possibilities = {"Pickable object", "Container", "Usable object"};
            String s = (String)JOptionPane.showInputDialog(
                    Main_Panel,
                    "Type of item:\n",
                    "Choose item type",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    possibilities,
                    "Pickable object");
            Player ply = (Player)selectedNode.getUserObject();
            if(s != null){
                switch(s){
                    case "Pickable object":
                        Pick_Able_Object o = new Pick_Able_Object("Object");
                        ply.pickup(o);
                        updateTree();
                        break;

                    case "Container":
                        Container c = new Container("Container");
                        ply.pickup(c);
                        updateTree();
                        break;           
                }   
            }
        }
        else{
            JOptionPane.showMessageDialog(Main_Panel, "Please select a room, container or player to create Object", "Inane warning", JOptionPane.WARNING_MESSAGE);
        } 
    }//GEN-LAST:event_objectMouseClicked

    
    private void roomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roomMouseClicked
        Room r = new Room("new room");
        g.addRoom(r);
        //select the room?
        updateTree();
    }//GEN-LAST:event_roomMouseClicked

    private void Current_GameValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_Current_GameValueChanged
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode)Current_Game.getLastSelectedPathComponent();
        if(selectedNode != null){
           if(selectedNode.getUserObject() instanceof Room){
               info.setEnabledAt(1, true); 
               Room r = (Room)selectedNode.getUserObject();
                objectName.setText(r.getName());
                description.setText(r.getDescription());
                updateExitTable(r);
            }
            else if(selectedNode.getUserObject() instanceof String){
                objectName.setText((String)selectedNode.getUserObject());
            }
            else{
                Object o = (Object)selectedNode.getUserObject();
                objectName.setText(o.getName());
                description.setText(o.getDesc());
                info.setEnabledAt(1, false);
            }  
        }
    }//GEN-LAST:event_Current_GameValueChanged

    private void objectNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_objectNameFocusLost
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode)Current_Game.getLastSelectedPathComponent();
        if(selectedNode != null){
            if(selectedNode.getUserObject() instanceof Room){
                Room r = (Room)selectedNode.getUserObject();
                g.findRoom(r).setName(objectName.getText());
                info.setEnabledAt(1, true);
            }
            else if(selectedNode.getUserObject() instanceof Container){
                info.setEnabledAt(1, false);
                DefaultMutableTreeNode parent = (DefaultMutableTreeNode)selectedNode.getParent();
                if(parent.getUserObject() instanceof Room){
                    Object o = (Object)selectedNode.getUserObject();
                    g.findRoom((Room)parent.getUserObject()).findObject(o).setName(objectName.getText());
                }
                else{
                    while(!(parent.getUserObject() instanceof Room)){
                        parent = (DefaultMutableTreeNode)parent.getParent();
                    }
                    Object o = (Object)selectedNode.getUserObject();
                    g.findRoom((Room)parent.getUserObject()).findObject(o).setName(objectName.getText());
                }
            } 
            else if(selectedNode.getUserObject() instanceof Player){
                info.setEnabledAt(1, false);
                g.getPlayer().setName(objectName.getText());
            }
            else if(((DefaultMutableTreeNode)selectedNode.getParent()).getUserObject() instanceof Room){
                DefaultMutableTreeNode parent = (DefaultMutableTreeNode)selectedNode.getParent();
                Object o = (Object)selectedNode.getUserObject();
                g.findRoom((Room)parent.getUserObject()).findObject(o).setName(objectName.getText());
            }
            else{
                Object o = (Object)selectedNode.getUserObject();
                g.getPlayer().findObject(o).setName(objectName.getText());
            }
            jScrollPane5.setViewportView(Current_Game);
        }
        else{
            JOptionPane.showMessageDialog(Main_Panel, "Please select a room or object!", "Inane warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_objectNameFocusLost

    private void menu_File_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_File_SaveActionPerformed
        JFileChooser saveFile = new JFileChooser();
        int returnVal = saveFile.showSaveDialog(menuFile);
        if(returnVal == JFileChooser.APPROVE_OPTION){
            String name = saveFile.getSelectedFile().toString();
            name = name + ".ser";
            Game_Saver.save_Created_Game(g, name);
        }
        else if(returnVal == JFileChooser.CANCEL_OPTION){
            saveFile.cancelSelection();
        }
    }//GEN-LAST:event_menu_File_SaveActionPerformed

    private void menu_File_OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_File_OpenActionPerformed
        JFileChooser openFile = new JFileChooser();
        int returnVal =  openFile.showOpenDialog(menuFile);
        if(returnVal == JFileChooser.APPROVE_OPTION){
            String name = openFile.getSelectedFile().toString();
            g = Game_Saver.load_Created_Game(name);
            updateTree();
        }
        else if(returnVal == JFileChooser.CANCEL_OPTION){
            System.out.println("Cancelled");
        }
    }//GEN-LAST:event_menu_File_OpenActionPerformed

    private void deleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteMouseClicked
         DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode)Current_Game.getLastSelectedPathComponent();
         DefaultTreeModel model = (DefaultTreeModel)Current_Game.getModel();
         if(selectedNode != null){
             if(selectedNode.getUserObject() instanceof Room){
                 info.setEnabledAt(1, true);
                 g.removeRoom((Room)selectedNode.getUserObject());
             }
             else{
                    DefaultMutableTreeNode parent = (DefaultMutableTreeNode)selectedNode.getParent();
                    if(parent != null && parent.getUserObject() instanceof Room){
                        Object o = (Object)selectedNode.getUserObject();
                        g.findRoom((Room)parent.getUserObject()).removeObject(o);
                    }
                    else{
                        while(!(parent.getUserObject() instanceof Room)){
                            parent = (DefaultMutableTreeNode)parent.getParent();
                        }
                        Object o = (Object)selectedNode.getUserObject();
                        g.findRoom((Room)parent.getUserObject()).removeObject(o);
                    }
             }
             model.removeNodeFromParent(selectedNode);
         }
    }//GEN-LAST:event_deleteMouseClicked

    private void create_exitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_create_exitMouseClicked
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode)Current_Game.getLastSelectedPathComponent();
        String name = exit_name.getText();
        String room = exit_room.getText();
        
        Room r = g.findRoomByName(room);
        if(r == null){
            JOptionPane.showMessageDialog(Main_Panel, "Room not found!", "Inane warning", JOptionPane.WARNING_MESSAGE);
        }
        else{
            if(!g.findRoom((Room)selectedNode.getUserObject()).addExit(name, r)){
                JOptionPane.showMessageDialog(Main_Panel, "Exit already exists!", "Inane warning", JOptionPane.WARNING_MESSAGE);
            }
            else{
                exit_name.setText("");
                exit_room.setText("");
                updateExitTable((Room)selectedNode.getUserObject());
            }
        }
    }//GEN-LAST:event_create_exitMouseClicked

    private void remove_exitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_remove_exitMouseClicked
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode)Current_Game.getLastSelectedPathComponent();
        String name = remove_exit_name.getText();
        g.findRoom((Room)selectedNode.getUserObject()).removeExit(name);
    }//GEN-LAST:event_remove_exitMouseClicked

    private void descriptionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_descriptionFocusLost
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode)Current_Game.getLastSelectedPathComponent();
        if(selectedNode != null){
            if(selectedNode.getUserObject() instanceof Room){
                Room r = (Room)selectedNode.getUserObject();
                g.findRoom(r).setDescription(description.getText());
            }
            else if(selectedNode.getUserObject() instanceof Container){
                DefaultMutableTreeNode parent = (DefaultMutableTreeNode)selectedNode.getParent();
                if(parent.getUserObject() instanceof Room){
                    Object o = (Object)selectedNode.getUserObject();
                    g.findRoom((Room)parent.getUserObject()).findObject(o).setDesc(description.getText());
                    info.setEnabledAt(1, false);
                }
                else{
                    while(!(parent.getUserObject() instanceof Room)){
                        parent = (DefaultMutableTreeNode)parent.getParent();
                    }
                    Object o = (Object)selectedNode.getUserObject();
                    g.findRoom((Room)parent.getUserObject()).findObject(o).setDesc(description.getText());
                    info.setEnabledAt(1, false);
                }
            } 
            else if(selectedNode.getUserObject() instanceof Player){
                g.getPlayer().setDesc(description.getText());
            }
            else if(((DefaultMutableTreeNode)selectedNode.getParent()).getUserObject() instanceof Room){
                DefaultMutableTreeNode parent = (DefaultMutableTreeNode)selectedNode.getParent();
                Object o = (Object)selectedNode.getUserObject();
                g.findRoom((Room)parent.getUserObject()).findObject(o).setDesc(description.getText());
            }
            else{
                Object o = (Object)selectedNode.getUserObject();
                g.getPlayer().findObject(o).setDesc(description.getText());
            }
            jScrollPane5.setViewportView(Current_Game);
        }
        else{
            JOptionPane.showMessageDialog(Main_Panel, "Please select a room or object!", "Inane warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_descriptionFocusLost

    private void play_gameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_play_gameMouseClicked
        new Play_Game().setVisible(true);
    }//GEN-LAST:event_play_gameMouseClicked

    private void updateExitTable(Room r){
        DefaultTableModel room_exits = (DefaultTableModel) Exits.getModel();
        room_exits.setRowCount(0);
        for(Exit e:r.getExit()){
            room_exits.addRow(new String[]{e.takeExit().getName(), e.getName()});
        }
        jScrollPane6.setViewportView(Exits);
    }
    private void updateTree(){
    DefaultMutableTreeNode game = new DefaultMutableTreeNode("Game");
    for(Room r: g.getRooms()){
        DefaultMutableTreeNode roomNode = new DefaultMutableTreeNode(r);
        game.add(roomNode);
        DefaultMutableTreeNode objNode;
        for(Object o: r.getObject()){
            objNode = new DefaultMutableTreeNode(o);
            if(o instanceof Container){
                Container cont = (Container)o;
                for(Object c:cont.getObjects()){
                    objNode.add(new DefaultMutableTreeNode(c));
                }
            }
            else if(o instanceof Player){
                Player ply = (Player) o;
                for(Object p: ply.getItems()){
                    objNode.add(new DefaultMutableTreeNode(p));
                }
            }
            roomNode.add(objNode);
        }
    game.add(roomNode);
    }
    Current_Game = new JTree(game);
    Current_Game.setFont(new java.awt.Font("Tahoma", 0, 25)); // NOI18N
        Current_Game.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                Current_GameValueChanged(evt);
            }
        });
    expandAll(Current_Game);
    jScrollPane5.setViewportView(Current_Game);
    }
    
    public void expandAll(JTree tree) {
    TreeNode root = (TreeNode) tree.getModel().getRoot();
    expandAll(tree, new TreePath(root));
  }

  private void expandAll(JTree tree, TreePath parent) {
    TreeNode node = (TreeNode) parent.getLastPathComponent();
    if (node.getChildCount() >= 0) {
      for (Enumeration e = node.children(); e.hasMoreElements();) {
        TreeNode n = (TreeNode) e.nextElement();
        TreePath path = parent.pathByAddingChild(n);
        expandAll(tree, path);
      }
    }
    tree.expandPath(parent);
  }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main_Edit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main_Edit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main_Edit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main_Edit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main_Edit().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree Current_Game;
    private javax.swing.JTable Exits;
    private javax.swing.JPanel Main_Panel;
    private javax.swing.JButton create_exit;
    private javax.swing.JPanel create_exit_form;
    private javax.swing.JPanel create_exit_form1;
    private javax.swing.JButton delete;
    private javax.swing.JTextArea description;
    private javax.swing.JPanel exit;
    private javax.swing.JTextField exit_name;
    private javax.swing.JTextField exit_room;
    private javax.swing.JTabbedPane info;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable4;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem menu_File_Open;
    private javax.swing.JMenuItem menu_File_Save;
    private javax.swing.JButton object;
    private javax.swing.JTextPane objectName;
    private javax.swing.JButton play_game;
    private javax.swing.JButton remove_exit;
    private javax.swing.JTextField remove_exit_name;
    private javax.swing.JButton room;
    // End of variables declaration//GEN-END:variables
}
