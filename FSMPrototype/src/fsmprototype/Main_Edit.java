/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fsmprototype;

import java.util.Enumeration;
import java.util.LinkedList;
import javax.swing.JTree;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import fsmprototype.Condition.Type;
import java.util.Set;

/**
 *
 * @author Alvin Lu
 */
public class Main_Edit extends javax.swing.JFrame {

    protected static Game g;
    
    public Main_Edit() {
        DefaultListModel<String> model = new DefaultListModel<>();
        g = MainMenu.game;
        for(Room r:g.getRooms()){
            model.addElement(r.getName());
        }
        initComponents();  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Add_Attribute_Window = new javax.swing.JFrame();
        attribute_label = new javax.swing.JLabel();
        attribute_Name_label = new javax.swing.JLabel();
        num_att_amt = new javax.swing.JTextField();
        attribute_type_label = new javax.swing.JLabel();
        attribute_type = new javax.swing.JComboBox<>();
        num_att_label = new javax.swing.JLabel();
        create_attribute_button = new javax.swing.JButton();
        associated_verb_label1 = new javax.swing.JLabel();
        num_att_IncDec = new javax.swing.JComboBox<>();
        num_att_amt_label = new javax.swing.JLabel();
        attribute_name = new javax.swing.JTextField();
        verb_name = new javax.swing.JTextField();
        starting_val = new javax.swing.JLabel();
        att_def_bool = new javax.swing.JComboBox<>();
        att_def_num = new javax.swing.JTextField();
        associated_object_label = new javax.swing.JLabel();
        object_name = new javax.swing.JTextField();
        object_room_label = new javax.swing.JLabel();
        object_room_name = new javax.swing.JTextField();
        same_room = new javax.swing.JCheckBox();
        cancel_Attribute = new javax.swing.JButton();
        Add_Transition_Window = new javax.swing.JFrame();
        state_window_title = new javax.swing.JLabel();
        start_State_Label = new javax.swing.JLabel();
        transition_Verb = new javax.swing.JTextField();
        transition_verb_label = new javax.swing.JLabel();
        start_State = new javax.swing.JTextField();
        end_State_Label = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        condition_Table = new javax.swing.JTable();
        condition_list_label = new javax.swing.JLabel();
        create_Transition = new javax.swing.JButton();
        cancel_Transition = new javax.swing.JButton();
        add_condition = new javax.swing.JButton();
        delete_condition = new javax.swing.JButton();
        end_State = new javax.swing.JTextField();
        save_Transition = new javax.swing.JButton();
        previous_Start = new javax.swing.JTextField();
        previous_Verb = new javax.swing.JTextField();
        object_associated_label_trans = new javax.swing.JLabel();
        object_Associated_Transition = new javax.swing.JTextField();
        Object_Type = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        Add_Condition_Window = new javax.swing.JFrame();
        jLabel10 = new javax.swing.JLabel();
        condition_name_label = new javax.swing.JLabel();
        condition_type_label = new javax.swing.JLabel();
        condition_attribute_label = new javax.swing.JLabel();
        condition_value_label = new javax.swing.JLabel();
        condition_Name = new javax.swing.JTextField();
        condition_Value = new javax.swing.JTextField();
        condition_Attribute = new javax.swing.JTextField();
        condition_Create = new javax.swing.JButton();
        condition_Cancel = new javax.swing.JButton();
        condition_Save = new javax.swing.JButton();
        condition_attribute_object_label = new javax.swing.JLabel();
        condition_Associated_Object = new javax.swing.JTextField();
        condition_Type = new javax.swing.JComboBox<>();
        condition_value_bool = new javax.swing.JComboBox<>();
        jToolBar1 = new javax.swing.JToolBar();
        object = new javax.swing.JButton();
        room = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        play_game = new javax.swing.JButton();
        info = new javax.swing.JTabbedPane();
        Main_Panel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        objectName = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        description = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        att_table = new javax.swing.JTable();
        add_attribute = new javax.swing.JButton();
        delete_attribute = new javax.swing.JButton();
        exit = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        Exits = new javax.swing.JTable();
        create_exit_form = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        exit_name = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        exit_room = new javax.swing.JTextField();
        create_exit = new javax.swing.JButton();
        create_exit_form1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        remove_exit_name = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        remove_exit = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        transition_Table = new javax.swing.JTable();
        addState = new javax.swing.JButton();
        deleteState = new javax.swing.JButton();
        edit_State = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        states_Table = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        Current_Game = new javax.swing.JTree();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menu_File_Save = new javax.swing.JMenuItem();
        menu_File_Open = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();

        Add_Attribute_Window.setVisible(false);
        Add_Attribute_Window.setPreferredSize(new java.awt.Dimension(900, 550));
        Add_Attribute_Window.setSize(new java.awt.Dimension(950, 800));

        attribute_label.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        attribute_label.setText("Add an Attribute");

        attribute_Name_label.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        attribute_Name_label.setText("Name");

        num_att_amt.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        num_att_amt.setVisible(false);

        attribute_type_label.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        attribute_type_label.setText("Attribute type");

        attribute_type.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        attribute_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Boolean", "Number" }));
        attribute_type.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                attribute_typeItemStateChanged(evt);
            }
        });

        num_att_label.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        num_att_label.setText("Effect");
        num_att_label.setVisible(false);

        create_attribute_button.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        create_attribute_button.setText("Create");
        create_attribute_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                create_attribute_buttonMouseClicked(evt);
            }
        });

        associated_verb_label1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        associated_verb_label1.setText("Associated verb");

        num_att_IncDec.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        num_att_IncDec.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Increase", "Decrease", " " }));
        num_att_IncDec.setVisible(false);

        num_att_amt_label.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        num_att_amt_label.setText("Amount");
        num_att_amt_label.setVisible(false);

        attribute_name.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        verb_name.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        starting_val.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        starting_val.setText("Starting");
        num_att_label.setVisible(false);

        att_def_bool.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        att_def_bool.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "true", "false" }));

        att_def_num.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        att_def_num.setVisible(false);

        associated_object_label.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        associated_object_label.setText("Associated object");

        object_name.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        object_room_label.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        object_room_label.setText("Room of object");

        object_room_name.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        same_room.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        same_room.setText("Only usable in the same room");

        cancel_Attribute.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        cancel_Attribute.setText("Cancel");

        javax.swing.GroupLayout Add_Attribute_WindowLayout = new javax.swing.GroupLayout(Add_Attribute_Window.getContentPane());
        Add_Attribute_Window.getContentPane().setLayout(Add_Attribute_WindowLayout);
        Add_Attribute_WindowLayout.setHorizontalGroup(
            Add_Attribute_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Add_Attribute_WindowLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Add_Attribute_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Add_Attribute_WindowLayout.createSequentialGroup()
                        .addGroup(Add_Attribute_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(attribute_label)
                            .addComponent(object_room_label))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Add_Attribute_WindowLayout.createSequentialGroup()
                        .addGroup(Add_Attribute_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(attribute_Name_label)
                            .addComponent(associated_verb_label1)
                            .addComponent(associated_object_label))
                        .addGap(80, 80, 80)
                        .addGroup(Add_Attribute_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(object_room_name, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(object_name, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(verb_name, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(attribute_name, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(127, 127, 127))
                    .addGroup(Add_Attribute_WindowLayout.createSequentialGroup()
                        .addGroup(Add_Attribute_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Add_Attribute_WindowLayout.createSequentialGroup()
                                .addGroup(Add_Attribute_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(num_att_amt_label, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(num_att_label, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(183, 183, 183))
                            .addGroup(Add_Attribute_WindowLayout.createSequentialGroup()
                                .addGroup(Add_Attribute_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(starting_val)
                                    .addComponent(attribute_type_label))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(Add_Attribute_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(Add_Attribute_WindowLayout.createSequentialGroup()
                                .addGroup(Add_Attribute_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Add_Attribute_WindowLayout.createSequentialGroup()
                                        .addComponent(att_def_bool, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18))
                                    .addGroup(Add_Attribute_WindowLayout.createSequentialGroup()
                                        .addGroup(Add_Attribute_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(num_att_amt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(num_att_IncDec, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(53, 53, 53)))
                                .addGroup(Add_Attribute_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(same_room)
                                    .addComponent(att_def_num, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(Add_Attribute_WindowLayout.createSequentialGroup()
                                .addComponent(attribute_type, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(58, 58, 58))
                            .addGroup(Add_Attribute_WindowLayout.createSequentialGroup()
                                .addComponent(cancel_Attribute)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(create_attribute_button)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        Add_Attribute_WindowLayout.setVerticalGroup(
            Add_Attribute_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Add_Attribute_WindowLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(attribute_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Add_Attribute_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(attribute_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(attribute_Name_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(Add_Attribute_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(verb_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(associated_verb_label1, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE))
                .addGap(21, 21, 21)
                .addGroup(Add_Attribute_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(object_name)
                    .addComponent(associated_object_label, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(Add_Attribute_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(object_room_label)
                    .addComponent(object_room_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(Add_Attribute_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(attribute_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(attribute_type_label))
                .addGap(24, 24, 24)
                .addGroup(Add_Attribute_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(starting_val, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(att_def_bool, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(att_def_num, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(Add_Attribute_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(num_att_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(num_att_IncDec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(same_room))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(Add_Attribute_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(num_att_amt_label)
                    .addComponent(num_att_amt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(Add_Attribute_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(create_attribute_button)
                    .addComponent(cancel_Attribute))
                .addContainerGap())
        );

        Add_Transition_Window.setPreferredSize(new java.awt.Dimension(1390, 1099));
        Add_Transition_Window.setSize(new java.awt.Dimension(1400, 1048));

        state_window_title.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        state_window_title.setText("Add Transition window");

        start_State_Label.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        start_State_Label.setText("Start state");

        transition_Verb.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        transition_verb_label.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        transition_verb_label.setText("Verb associated");

        start_State.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        end_State_Label.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        end_State_Label.setText("End state");

        condition_Table.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        condition_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Attribute associated", "Condition"
            }
        ));
        condition_Table.setRowHeight(24);
        jScrollPane1.setViewportView(condition_Table);

        condition_list_label.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        condition_list_label.setText("Condition list");

        create_Transition.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        create_Transition.setText("Create");
        create_Transition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                create_TransitionActionPerformed(evt);
            }
        });

        cancel_Transition.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        cancel_Transition.setText("Cancel");
        cancel_Transition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel_TransitionActionPerformed(evt);
            }
        });

        add_condition.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        add_condition.setText("Add condition");
        add_condition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_conditionActionPerformed(evt);
            }
        });

        delete_condition.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        delete_condition.setText("Delete condition");
        delete_condition.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                delete_conditionMouseClicked(evt);
            }
        });

        end_State.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        save_Transition.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        save_Transition.setText("Save");
        save_Transition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_TransitionActionPerformed(evt);
            }
        });

        previous_Start.setText("jTextField1");
        previous_Start.setVisible(false);

        previous_Verb.setText("jTextField1");
        previous_Verb.setVisible(false);

        object_associated_label_trans.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        object_associated_label_trans.setText("Object associated");

        object_Associated_Transition.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        Add_Transition_Window.setVisible(false);

        javax.swing.GroupLayout Add_Transition_WindowLayout = new javax.swing.GroupLayout(Add_Transition_Window.getContentPane());
        Add_Transition_Window.getContentPane().setLayout(Add_Transition_WindowLayout);
        Add_Transition_WindowLayout.setHorizontalGroup(
            Add_Transition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Add_Transition_WindowLayout.createSequentialGroup()
                .addGroup(Add_Transition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(Add_Transition_WindowLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(Add_Transition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(state_window_title)
                            .addGroup(Add_Transition_WindowLayout.createSequentialGroup()
                                .addGroup(Add_Transition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(start_State_Label)
                                    .addComponent(transition_verb_label)
                                    .addComponent(end_State_Label)
                                    .addComponent(object_associated_label_trans))
                                .addGap(56, 56, 56)
                                .addGroup(Add_Transition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(transition_Verb, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                                    .addComponent(start_State)
                                    .addComponent(end_State)
                                    .addComponent(object_Associated_Transition, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(Add_Transition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(previous_Start, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(previous_Verb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(142, 142, 142))))
                    .addGroup(Add_Transition_WindowLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(Add_Transition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(Add_Transition_WindowLayout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(condition_list_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(delete_condition)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(add_condition))
                            .addGroup(Add_Transition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(Add_Transition_WindowLayout.createSequentialGroup()
                                    .addComponent(save_Transition)
                                    .addGap(18, 18, 18)
                                    .addComponent(cancel_Transition)
                                    .addGap(18, 18, 18)
                                    .addComponent(create_Transition))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1294, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(75, Short.MAX_VALUE))
        );
        Add_Transition_WindowLayout.setVerticalGroup(
            Add_Transition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Add_Transition_WindowLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(state_window_title)
                .addGap(41, 41, 41)
                .addGroup(Add_Transition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(start_State_Label)
                    .addComponent(start_State, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(previous_Start, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(Add_Transition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Add_Transition_WindowLayout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(Add_Transition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(end_State_Label)
                            .addComponent(end_State, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(Add_Transition_WindowLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(previous_Verb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(55, 55, 55)
                .addGroup(Add_Transition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(transition_verb_label)
                    .addComponent(transition_Verb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(61, 61, 61)
                .addGroup(Add_Transition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(object_associated_label_trans)
                    .addComponent(object_Associated_Transition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addGroup(Add_Transition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Add_Transition_WindowLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(condition_list_label)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Add_Transition_WindowLayout.createSequentialGroup()
                        .addGroup(Add_Transition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(add_condition)
                            .addComponent(delete_condition))
                        .addGap(34, 34, 34)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82)
                .addGroup(Add_Transition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(create_Transition)
                    .addComponent(cancel_Transition)
                    .addComponent(save_Transition))
                .addGap(106, 106, 106))
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setText("Select Object type");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Container", "Edible", "Human", "Limited use object", "Pickable object", "Player", "Switchable", "Unlimited use", "Wearable", " " }));

        javax.swing.GroupLayout Object_TypeLayout = new javax.swing.GroupLayout(Object_Type.getContentPane());
        Object_Type.getContentPane().setLayout(Object_TypeLayout);
        Object_TypeLayout.setHorizontalGroup(
            Object_TypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Object_TypeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Object_TypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(440, Short.MAX_VALUE))
        );
        Object_TypeLayout.setVerticalGroup(
            Object_TypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Object_TypeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(45, 45, 45)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(91, Short.MAX_VALUE))
        );

        Add_Condition_Window.setSize(new java.awt.Dimension(1040, 600));

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel10.setText("Condition window");

        condition_name_label.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        condition_name_label.setText("Name");

        condition_type_label.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        condition_type_label.setText("Type");

        condition_attribute_label.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        condition_attribute_label.setText("Attribute associated");

        condition_value_label.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        condition_value_label.setText("Value");

        condition_Name.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        condition_Value.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        condition_Value.setVisible(false);

        condition_Attribute.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        condition_Create.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        condition_Create.setText("Create");
        condition_Create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                condition_CreateActionPerformed(evt);
            }
        });

        condition_Cancel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        condition_Cancel.setText("Cancel");

        condition_Save.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        condition_Save.setText("Save");
        condition_Save.setVisible(false);

        condition_attribute_object_label.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        condition_attribute_object_label.setText("Owner of attribute");

        condition_Associated_Object.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        condition_Type.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        condition_Type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Boolean", "Numeric equal", "Numeric bigger than", "Numeric smaller than" }));
        condition_Type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                condition_TypeActionPerformed(evt);
            }
        });

        condition_value_bool.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        condition_value_bool.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "true", "false" }));

        Add_Condition_Window.setVisible(false);

        javax.swing.GroupLayout Add_Condition_WindowLayout = new javax.swing.GroupLayout(Add_Condition_Window.getContentPane());
        Add_Condition_Window.getContentPane().setLayout(Add_Condition_WindowLayout);
        Add_Condition_WindowLayout.setHorizontalGroup(
            Add_Condition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Add_Condition_WindowLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Add_Condition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Add_Condition_WindowLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(condition_Save)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(condition_Cancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(condition_Create)
                        .addGap(21, 21, 21))
                    .addGroup(Add_Condition_WindowLayout.createSequentialGroup()
                        .addGroup(Add_Condition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addGroup(Add_Condition_WindowLayout.createSequentialGroup()
                                .addGroup(Add_Condition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(condition_name_label)
                                    .addComponent(condition_type_label)
                                    .addComponent(condition_value_label)
                                    .addComponent(condition_attribute_label)
                                    .addComponent(condition_attribute_object_label))
                                .addGap(48, 48, 48)
                                .addGroup(Add_Condition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(condition_Associated_Object, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(condition_Attribute, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(Add_Condition_WindowLayout.createSequentialGroup()
                                        .addComponent(condition_Value, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(condition_value_bool, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(Add_Condition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(condition_Type, javax.swing.GroupLayout.Alignment.LEADING, 0, 338, Short.MAX_VALUE)
                                        .addComponent(condition_Name, javax.swing.GroupLayout.Alignment.LEADING)))))
                        .addGap(381, 446, Short.MAX_VALUE))))
        );
        Add_Condition_WindowLayout.setVerticalGroup(
            Add_Condition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Add_Condition_WindowLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addGap(55, 55, 55)
                .addGroup(Add_Condition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(condition_name_label)
                    .addComponent(condition_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(Add_Condition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(condition_type_label)
                    .addComponent(condition_Type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(54, 54, 54)
                .addGroup(Add_Condition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(condition_value_label)
                    .addComponent(condition_Value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(condition_value_bool, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addGroup(Add_Condition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(condition_attribute_label)
                    .addComponent(condition_Attribute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(Add_Condition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(condition_attribute_object_label)
                    .addComponent(condition_Associated_Object, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addGroup(Add_Condition_WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(condition_Create)
                    .addComponent(condition_Cancel)
                    .addComponent(condition_Save))
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setRollover(true);

        object.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        object.setText("Create Object    ");
        object.setFocusable(false);
        object.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        object.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        object.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                objectMouseClicked(evt);
            }
        });
        jToolBar1.add(object);

        room.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        room.setText("Create room");
        room.setFocusable(false);
        room.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        room.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        room.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roomMouseClicked(evt);
            }
        });
        jToolBar1.add(room);

        delete.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        delete.setText("     Delete");
        delete.setFocusable(false);
        delete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        delete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        delete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteMouseClicked(evt);
            }
        });
        jToolBar1.add(delete);

        play_game.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        play_game.setText("      Play");
        play_game.setFocusable(false);
        play_game.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        play_game.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        play_game.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                play_gameMouseClicked(evt);
            }
        });
        jToolBar1.add(play_game);

        info.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setText("Name");

        objectName.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        objectName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                objectNameFocusLost(evt);
            }
        });
        jScrollPane2.setViewportView(objectName);

        description.setColumns(20);
        description.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N
        description.setRows(5);
        description.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                descriptionFocusLost(evt);
            }
        });
        jScrollPane3.setViewportView(description);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel3.setText("Description");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel4.setText("Attributes");

        att_table.setFont(new java.awt.Font("Tahoma", 0, 26)); // NOI18N
        att_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Type", "Default value", "Verb asscociated"
            }
        ));
        att_table.setRowHeight(24);
        jScrollPane4.setViewportView(att_table);

        add_attribute.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        add_attribute.setText("Add attribute");
        add_attribute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_attributeActionPerformed(evt);
            }
        });

        delete_attribute.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        delete_attribute.setText("Delete");
        delete_attribute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_attributeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Main_PanelLayout = new javax.swing.GroupLayout(Main_Panel);
        Main_Panel.setLayout(Main_PanelLayout);
        Main_PanelLayout.setHorizontalGroup(
            Main_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Main_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Main_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(Main_PanelLayout.createSequentialGroup()
                        .addGroup(Main_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(31, 31, 31)
                        .addGroup(Main_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3)
                            .addComponent(jScrollPane2)))
                    .addGroup(Main_PanelLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(delete_attribute)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(add_attribute))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 1138, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(96, Short.MAX_VALUE))
        );
        Main_PanelLayout.setVerticalGroup(
            Main_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Main_PanelLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(Main_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(Main_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(Main_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(add_attribute)
                    .addComponent(delete_attribute))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                .addContainerGap())
        );

        info.addTab("Information", Main_Panel);

        Exits.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Exits.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Room", "Exit name"
            }
        ));
        Exits.setRowHeight(24);
        jScrollPane6.setViewportView(Exits);

        jLabel5.setText("Add Exit");

        exit_name.setText("Exit name");

        jLabel6.setText("Exit name");

        jLabel7.setText("Exit room");

        exit_room.setText("Exit room");

        create_exit.setText("Create exit");
        create_exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                create_exitMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout create_exit_formLayout = new javax.swing.GroupLayout(create_exit_form);
        create_exit_form.setLayout(create_exit_formLayout);
        create_exit_formLayout.setHorizontalGroup(
            create_exit_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(create_exit_formLayout.createSequentialGroup()
                .addGroup(create_exit_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(create_exit_formLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel5))
                    .addGroup(create_exit_formLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exit_name, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(create_exit_formLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(create_exit_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(create_exit_formLayout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(exit_room))
                            .addComponent(create_exit))))
                .addContainerGap(292, Short.MAX_VALUE))
        );
        create_exit_formLayout.setVerticalGroup(
            create_exit_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(create_exit_formLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(24, 24, 24)
                .addGroup(create_exit_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(exit_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(create_exit_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(exit_room, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(create_exit)
                .addContainerGap(66, Short.MAX_VALUE))
        );

        jLabel8.setText("Remove Exit");

        remove_exit_name.setText("Exit name");

        jLabel9.setText("Exit name");

        remove_exit.setText("Remove exit");
        remove_exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                remove_exitMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout create_exit_form1Layout = new javax.swing.GroupLayout(create_exit_form1);
        create_exit_form1.setLayout(create_exit_form1Layout);
        create_exit_form1Layout.setHorizontalGroup(
            create_exit_form1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(create_exit_form1Layout.createSequentialGroup()
                .addGroup(create_exit_form1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(create_exit_form1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel8))
                    .addGroup(create_exit_form1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(remove_exit_name, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(create_exit_form1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(remove_exit)))
                .addContainerGap(277, Short.MAX_VALUE))
        );
        create_exit_form1Layout.setVerticalGroup(
            create_exit_form1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(create_exit_form1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addGap(24, 24, 24)
                .addGroup(create_exit_form1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(remove_exit_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(65, 65, 65)
                .addComponent(remove_exit)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout exitLayout = new javax.swing.GroupLayout(exit);
        exit.setLayout(exitLayout);
        exitLayout.setHorizontalGroup(
            exitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exitLayout.createSequentialGroup()
                .addGroup(exitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, exitLayout.createSequentialGroup()
                        .addComponent(jScrollPane6)
                        .addGap(49, 49, 49))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, exitLayout.createSequentialGroup()
                        .addComponent(create_exit_form, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(create_exit_form1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(51, 51, 51))
        );
        exitLayout.setVerticalGroup(
            exitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exitLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(exitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(create_exit_form, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(create_exit_form1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(109, 109, 109))
        );

        info.addTab("Exits", exit);

        transition_Table.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        transition_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Start state", "Verb", "End state"
            }
        ));
        transition_Table.setRowHeight(24);
        jScrollPane8.setViewportView(transition_Table);

        addState.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        addState.setText("Add Transition");
        addState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStateActionPerformed(evt);
            }
        });

        deleteState.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        deleteState.setText("Delete Transition");
        deleteState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteStateActionPerformed(evt);
            }
        });

        edit_State.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        edit_State.setText("Edit Transition");
        edit_State.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edit_StateActionPerformed(evt);
            }
        });

        states_Table.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        states_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Name", "No of Transitions"
            }
        ));
        states_Table.setRowHeight(24);
        jScrollPane7.setViewportView(states_Table);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 1213, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(deleteState)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(edit_State)
                                .addGap(26, 26, 26)
                                .addComponent(addState))
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 1213, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addState)
                    .addComponent(deleteState)
                    .addComponent(edit_State))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        info.addTab("States", jPanel4);

        DefaultMutableTreeNode game = new DefaultMutableTreeNode("Game");
        updateTree();
        Current_Game.setFont(new java.awt.Font("Tahoma", 0, 25)); // NOI18N
        Current_Game.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                Current_GameValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(Current_Game);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 673, Short.MAX_VALUE)
                .addContainerGap())
        );

        menuFile.setText("File");

        menu_File_Save.setText("Save");
        menu_File_Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_File_SaveActionPerformed(evt);
            }
        });
        menuFile.add(menu_File_Save);

        menu_File_Open.setText("Open");
        menu_File_Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_File_OpenActionPerformed(evt);
            }
        });
        menuFile.add(menu_File_Open);

        menuBar.add(menuFile);

        menuEdit.setText("Edit");
        menuBar.add(menuEdit);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 1466, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(info))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(info))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void objectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_objectMouseClicked
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode)Current_Game.getLastSelectedPathComponent();
        if(selectedNode == null){
            JOptionPane.showMessageDialog(Main_Panel, 
                    "Please select a room to create Object!", 
                    "Inane warning", JOptionPane.WARNING_MESSAGE);
        }
        else if(selectedNode.getUserObject() instanceof Room){
            String[] possibilities = {"Player", "Human", "Pickable object", "Container"};
            String s = (String)JOptionPane.showInputDialog(
                    Main_Panel,
                    "Type of item:\n",
                    "Choose item type",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    possibilities,
                    possibilities[2]);
            Room r = (Room)selectedNode.getUserObject();
            if(s != null){
                switch(s){
                    case "Player":
                        if(g.getPlayer() == null){
                            Player p = new Player("Player", r);
                            g.addPlayer(p);
                            g.addObjectToRoom(r, p);
                            updateTree();
                            break;
                        } 
                    case "Human":
                        Human h = new Human("Human");
                        g.addObjectToRoom(r, h);
                        updateTree();
                        break;

                    case "Pickable object":
                        Pick_Able_Object o = new Pick_Able_Object("Object");
                        g.addObjectToRoom(r, o);
                        updateTree();
                        break;

                    case "Container":
                        Container c = new Container("Object");
                        g.addObjectToRoom(r, c);
                        updateTree();
                        break;
                }
            }
        }
        else if(selectedNode.getUserObject() instanceof Container){
            String[] possibilities = {"Pickable object", "Container", "Usable object"};
            String s = (String)JOptionPane.showInputDialog(
                    Main_Panel,
                    "Type of item:\n",
                    "Choose item type",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    possibilities,
                    "Pickable object");
            Container con = (Container)selectedNode.getUserObject();
            if(s != null){
                switch(s){
                    case "Pickable object":
                        Pick_Able_Object o = new Pick_Able_Object("Object");
                        con.addObjects(o);
                        updateTree();
                        break;

                    case "Container":
                        Container c = new Container("Container");
                        con.addObjects(c);
                        updateTree();
                        break;           
                } 
            }
        }
        
        else if(selectedNode.getUserObject() instanceof Player){
            String[] possibilities = {"Pickable object", "Container", "Usable object"};
            String s = (String)JOptionPane.showInputDialog(
                    Main_Panel,
                    "Type of item:\n",
                    "Choose item type",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    possibilities,
                    "Pickable object");
            Player ply = (Player)selectedNode.getUserObject();
            if(s != null){
                switch(s){
                    case "Pickable object":
                        Pick_Able_Object o = new Pick_Able_Object("Object");
                        ply.pickup(o);
                        updateTree();
                        break;

                    case "Container":
                        Container c = new Container("Container");
                        ply.pickup(c);
                        updateTree();
                        break;           
                }   
            }
        }
        else{
            JOptionPane.showMessageDialog(Main_Panel, "Please select a room, container or player to create Object", "Inane warning", JOptionPane.WARNING_MESSAGE);
        } 
    }//GEN-LAST:event_objectMouseClicked

    
    private void roomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roomMouseClicked
        Room r = new Room("new room");
        g.addRoom(r);
        //select the room?
        updateTree();
    }//GEN-LAST:event_roomMouseClicked

    private void Current_GameValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_Current_GameValueChanged
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode)Current_Game.getLastSelectedPathComponent();
        if(selectedNode != null){
           if(selectedNode.getUserObject() instanceof Room){
               info.setEnabledAt(1, true); 
               Room r = (Room)selectedNode.getUserObject();
                objectName.setText(r.getName());
                description.setText(r.getDescription());
                updateExitTable(r);
            }
            else if(selectedNode.getUserObject() instanceof String){
                objectName.setText((String)selectedNode.getUserObject());
            }
            else{
                Object o = (Object)selectedNode.getUserObject();
                objectName.setText(o.getName());
                description.setText(o.getDesc());
                info.setEnabledAt(1, false);
            }
           updateAttributeTable();
           updateStateTable();
           updateTransitionTable();
        }
    }//GEN-LAST:event_Current_GameValueChanged

    private void objectNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_objectNameFocusLost
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode)Current_Game.getLastSelectedPathComponent();
        if(selectedNode != null){
            if(selectedNode.getUserObject() instanceof Room){
                Room r = (Room)selectedNode.getUserObject();
                g.findRoom(r).setName(objectName.getText());
                info.setEnabledAt(1, true);
            }
            else if(selectedNode.getUserObject() instanceof Container){
                info.setEnabledAt(1, false);
                DefaultMutableTreeNode parent = (DefaultMutableTreeNode)selectedNode.getParent();
                if(parent.getUserObject() instanceof Room){
                    Object o = (Object)selectedNode.getUserObject();
                    g.findRoom((Room)parent.getUserObject()).findObject(o).setName(objectName.getText());
                }
                else{
                    while(!(parent.getUserObject() instanceof Room)){
                        parent = (DefaultMutableTreeNode)parent.getParent();
                    }
                    Object o = (Object)selectedNode.getUserObject();
                    g.findRoom((Room)parent.getUserObject()).findObject(o).setName(objectName.getText());
                }
            } 
            else if(selectedNode.getUserObject() instanceof Player){
                info.setEnabledAt(1, false);
                g.getPlayer().setName(objectName.getText());
            }
            else if(((DefaultMutableTreeNode)selectedNode.getParent()).getUserObject() instanceof Room){
                DefaultMutableTreeNode parent = (DefaultMutableTreeNode)selectedNode.getParent();
                Object o = (Object)selectedNode.getUserObject();
                g.findRoom((Room)parent.getUserObject()).findObject(o).setName(objectName.getText());
            }
            else{
                Object o = (Object)selectedNode.getUserObject();
                g.getPlayer().findObject(o).setName(objectName.getText());
            }
            jScrollPane5.setViewportView(Current_Game);
        }
        else{
            JOptionPane.showMessageDialog(Main_Panel, "Please select a room or object!", "Inane warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_objectNameFocusLost

    private void menu_File_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_File_SaveActionPerformed
        JFileChooser saveFile = new JFileChooser();
        int returnVal = saveFile.showSaveDialog(menuFile);
        if(returnVal == JFileChooser.APPROVE_OPTION){
            String name = saveFile.getSelectedFile().toString();
            name = name + ".ser";
            Game_Saver.save_Created_Game(g, name);
        }
        else if(returnVal == JFileChooser.CANCEL_OPTION){
            saveFile.cancelSelection();
        }
    }//GEN-LAST:event_menu_File_SaveActionPerformed

    private void menu_File_OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_File_OpenActionPerformed
        JFileChooser openFile = new JFileChooser();
        int returnVal =  openFile.showOpenDialog(menuFile);
        if(returnVal == JFileChooser.APPROVE_OPTION){
            String name = openFile.getSelectedFile().toString();
            g = Game_Saver.load_Created_Game(name);
            updateTree();
        }
        else if(returnVal == JFileChooser.CANCEL_OPTION){
            System.out.println("Cancelled");
        }
    }//GEN-LAST:event_menu_File_OpenActionPerformed

    private void deleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteMouseClicked
         DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode)Current_Game.getLastSelectedPathComponent();
         DefaultTreeModel model = (DefaultTreeModel)Current_Game.getModel();
         if(selectedNode != null){
             if(selectedNode.getUserObject() instanceof Room){
                 info.setEnabledAt(1, true);
                 g.removeRoom((Room)selectedNode.getUserObject());
             }
             else{
                    DefaultMutableTreeNode parent = (DefaultMutableTreeNode)selectedNode.getParent();
                    if(parent != null && parent.getUserObject() instanceof Room){
                        Object o = (Object)selectedNode.getUserObject();
                        g.findRoom((Room)parent.getUserObject()).removeObject(o);
                    }
                    else{
                        while(!(parent.getUserObject() instanceof Room)){
                            parent = (DefaultMutableTreeNode)parent.getParent();
                        }
                        Object o = (Object)selectedNode.getUserObject();
                        g.findRoom((Room)parent.getUserObject()).removeObject(o);
                    }
             }
             model.removeNodeFromParent(selectedNode);
         }
    }//GEN-LAST:event_deleteMouseClicked

    private void create_exitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_create_exitMouseClicked
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode)Current_Game.getLastSelectedPathComponent();
        String name = exit_name.getText();
        String room = exit_room.getText();
        
        Room r = g.findRoomByName(room);
        if(r == null){
            JOptionPane.showMessageDialog(Main_Panel, "Room not found!", "Room missing", JOptionPane.WARNING_MESSAGE);
        }
        else{
            if(!g.findRoom((Room)selectedNode.getUserObject()).addExit(name, r)){
                JOptionPane.showMessageDialog(Main_Panel, "Exit already exists!", "Inane warning", JOptionPane.WARNING_MESSAGE);
            }
            else{
                exit_name.setText("");
                exit_room.setText("");
                updateExitTable((Room)selectedNode.getUserObject());
            }
        }
    }//GEN-LAST:event_create_exitMouseClicked

    private void remove_exitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_remove_exitMouseClicked
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode)Current_Game.getLastSelectedPathComponent();
        String name = remove_exit_name.getText();
        g.findRoom((Room)selectedNode.getUserObject()).removeExit(name);
        updateExitTable((Room)selectedNode.getUserObject());
    }//GEN-LAST:event_remove_exitMouseClicked

    private void descriptionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_descriptionFocusLost
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode)Current_Game.getLastSelectedPathComponent();
        if(selectedNode != null){
            if(description.getText() == ""){  }
            else if(selectedNode.getUserObject() instanceof Room){
                Room r = (Room)selectedNode.getUserObject();
                r.setDesc(description.getText());
            }
            else if(selectedNode.getUserObject() instanceof Container){
                DefaultMutableTreeNode parent = (DefaultMutableTreeNode)selectedNode.getParent();
                if(parent.getUserObject() instanceof Room){
                    Object o = (Object)selectedNode.getUserObject();
                    g.findRoom((Room)parent.getUserObject()).findObject(o).setDesc(description.getText());
                    info.setEnabledAt(1, false);
                }
                else{
                    while(!(parent.getUserObject() instanceof Room)){
                        parent = (DefaultMutableTreeNode)parent.getParent();
                    }
                    Object o = (Object)selectedNode.getUserObject();
                    g.findRoom((Room)parent.getUserObject()).findObject(o).setDesc(description.getText());
                    info.setEnabledAt(1, false);
                }
            } 
            else if(selectedNode.getUserObject() instanceof Player){
                g.getPlayer().setDesc(description.getText());
            }
            else if(((DefaultMutableTreeNode)selectedNode.getParent()).getUserObject() instanceof Room){
                DefaultMutableTreeNode parent = (DefaultMutableTreeNode)selectedNode.getParent();
                Object o = (Object)selectedNode.getUserObject();
                g.findRoom((Room)parent.getUserObject()).findObject(o).setDesc(description.getText());
            }
            else{
                Object o = (Object)selectedNode.getUserObject();
                g.getPlayer().findObject(o).setDesc(description.getText());
            }
            jScrollPane5.setViewportView(Current_Game);
        }
        else{
            JOptionPane.showMessageDialog(Main_Panel, "Please select a room or object!", "Inane warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_descriptionFocusLost

    private void play_gameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_play_gameMouseClicked
        if(g.getPlayer() != null){
            new Play_Game().setVisible(true);
        }
        else{
            JOptionPane.showMessageDialog(Main_Panel, "Please create a player!",
                    "Inane warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_play_gameMouseClicked

    private void add_attributeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_attributeActionPerformed
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode)Current_Game.getLastSelectedPathComponent();
        if(selectedNode != null && !(selectedNode.getUserObject() instanceof String)){
            Add_Attribute_Window.setVisible(true);
        }
        else{
            JOptionPane.showMessageDialog(Main_Panel, "Please select a room or object!", "Failed to add Attribute", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_add_attributeActionPerformed

    private void create_attribute_buttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_create_attribute_buttonMouseClicked
        String name = attribute_name.getText();
        String verb = verb_name.getText();
        String type = attribute_type.getSelectedItem().toString();
        String obj = object_name.getText();
        String room = object_room_name.getText();
        boolean inRoom = same_room.isSelected();
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode)Current_Game.getLastSelectedPathComponent();
        Object  o = (Object)selectedNode.getUserObject();
        Object associated = null;
        for(Room r: g.getRooms()){
            if(r.getName().equals(obj)){
                associated = r;
            }
        }
        if(associated == null){
           associated = g.findObjectandRoomByName(room, obj); 
        }
        if(associated == null){
            JOptionPane.showMessageDialog(Main_Panel, 
                    "Can't find associated object!", 
                    "Object not found", JOptionPane.WARNING_MESSAGE);
        }
        else{
            if(type.equals("Boolean")){
                boolean defaultVal;
                if(att_def_bool.getSelectedItem().toString().equals("true")){
                    defaultVal = true;
                }
                else{
                    defaultVal = false;
                }
                Boolean_Attribute b = new Boolean_Attribute(name, verb, defaultVal, associated, o);
                if(inRoom){
                    b.usableInSameRoom();;
                }
                o.addAttribute(b);
                g.addVerb(new Verb(verb, associated, o));
                attribute_name.setText("");
                verb_name.setText("");
                object_name.setText("");
                object_room_name.setText("");
                num_att_amt.setText("");
                att_def_num.setText("");
                Add_Attribute_Window.setVisible(false);
            }
            else if(type.equals("Number")){
                String val = att_def_num.getText();
                try{
                    double defaultVal = Double.parseDouble(val);
                    String IncDec = num_att_IncDec.getSelectedItem().toString();
                    String amt = num_att_amt.getText();
                    double amount = Double.parseDouble(amt);
                    if(IncDec.equals("Increase")){
                        Number_Attribute a = new Number_Attribute(name, verb, defaultVal, amount, true, associated, o);
                        if(inRoom){
                            a.usableInSameRoom();
                        }
                        o.addAttribute(a);
                        g.addVerb(new Verb(verb, associated, o));
                    }
                    else{
                        Number_Attribute a = new Number_Attribute(name, verb, defaultVal, amount, false, associated, o);
                        if(inRoom){
                            a.usableInSameRoom();
                        }
                        o.addAttribute(a);
                        g.addVerb(new Verb(verb, associated, o));
                    }
                    attribute_name.setText("");
                    verb_name.setText("");
                    object_name.setText("");
                    object_room_name.setText("");
                    num_att_amt.setText("");
                    att_def_num.setText("");
                    Add_Attribute_Window.setVisible(false);

                }catch(Exception e){
                    JOptionPane.showMessageDialog(Main_Panel, 
                            "Value not a number!", "Not a number!", 
                            JOptionPane.WARNING_MESSAGE);
                }
            }
            updateAttributeTable();
        }
    }//GEN-LAST:event_create_attribute_buttonMouseClicked

    private void attribute_typeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_attribute_typeItemStateChanged
        if (evt.getStateChange() == evt.SELECTED) {
            if(attribute_type.getSelectedItem().toString().equals("Number")){
                num_att_label.setVisible(true);
                num_att_IncDec.setVisible(true);
                num_att_amt_label.setVisible(true);
                num_att_amt.setVisible(true);
                att_def_bool.setVisible(false);
                att_def_num.setVisible(true);
            }
            else{
                num_att_label.setVisible(false);
                num_att_IncDec.setVisible(false);
                num_att_amt_label.setVisible(false);
                num_att_amt.setVisible(false);
                att_def_bool.setVisible(true);
                att_def_num.setVisible(false);
            }
        }
    }//GEN-LAST:event_attribute_typeItemStateChanged

    private void delete_attributeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_attributeActionPerformed
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode)Current_Game.getLastSelectedPathComponent();
            String s = (String)JOptionPane.showInputDialog(
                    Main_Panel,
                    "Enter name\n",
                    "Attribute name:",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    null,
                    null);
        Attribute a = ((Object)selectedNode.getUserObject()).deleteAtrributebyName(s);
        if(a == null){
            JOptionPane.showMessageDialog(Main_Panel, "Attribute not found!", "Not found!", JOptionPane.WARNING_MESSAGE);
        }
        updateAttributeTable();
    }//GEN-LAST:event_delete_attributeActionPerformed

    private void addStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStateActionPerformed
        DefaultMutableTreeNode selectedNode = 
                (DefaultMutableTreeNode)Current_Game
                        .getLastSelectedPathComponent();
        if(selectedNode != null 
                && !(selectedNode.getUserObject() instanceof String)){
            Add_Transition_Window.setVisible(true);
            create_Transition.setVisible(true);
            save_Transition.setVisible(false);
            add_condition.setVisible(false);
            delete_condition.setVisible(false);
        }
        else{
            JOptionPane.showMessageDialog(Main_Panel, "Please select a room or object!", "Failed to add Attribute", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_addStateActionPerformed

    private void save_TransitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_TransitionActionPerformed
        String start = start_State.getText();
        String verb = transition_Verb.getText();
        String end = end_State.getText();
        DefaultMutableTreeNode selectedNode = 
                (DefaultMutableTreeNode)Current_Game
                        .getLastSelectedPathComponent();
        if(selectedNode != null 
                && !(selectedNode.getUserObject() instanceof String)){
            Object  o = (Object)selectedNode.getUserObject();
            State prev = o.findState(previous_Start.getText());
            State strt = o.findState(start);
            if(strt == null){
                JOptionPane.showMessageDialog(Main_Panel, 
                    "Please enter an exsiting state for Start state!", 
                    "Failed to edit Transition", JOptionPane.WARNING_MESSAGE);
            }
            else{
                Transition cur = prev.findTransition(verb, end);
                State e = o.findState(end);
                if(e == null){
                    strt.addTransition(verb, new State(end));
                    o.deleteTransition(verb, end);
                }
                else{
                    strt.addTransition(verb, e);
                    o.deleteTransition(verb, end);
                }
            }
           previous_Start.setText("");
           previous_Verb.setText("");
           Add_Transition_Window.setVisible(false);
        }
    }//GEN-LAST:event_save_TransitionActionPerformed

    private void edit_StateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edit_StateActionPerformed
        DefaultMutableTreeNode selectedNode = 
                (DefaultMutableTreeNode)Current_Game
                        .getLastSelectedPathComponent();
        if(selectedNode != null 
                && !(selectedNode.getUserObject() instanceof String)){
                Add_Transition_Window.setVisible(true);
                create_Transition.setVisible(false);
                save_Transition.setVisible(true);
                add_condition.setVisible(true);
                delete_condition.setVisible(true);
                int row = transition_Table.getSelectedRow();
                Transition t = ((Object)selectedNode.getUserObject())
                        .findTransition(transition_Table.getValueAt(row, 1)
                            .toString(), transition_Table.getValueAt(row, 2)
                            .toString());
                if(row >= 0 && t != null){
                    transition_Verb.setText(transition_Table.getValueAt(row, 1)
                            .toString());
                    end_State.setText(transition_Table.getValueAt(row, 2)
                            .toString());
                    start_State.setText(transition_Table.getValueAt(row, 0)
                            .toString());
                    previous_Start.setText(transition_Table.getValueAt(row, 0)
                            .toString());
                    previous_Verb.setText(transition_Table.getValueAt(row, 1)
                            .toString());
                    updateConditionTable(t);
                }
                else{
                    JOptionPane.showMessageDialog(Main_Panel,
                            "Please select a transition!",
                            "Failed to edit Transition",
                            JOptionPane.WARNING_MESSAGE);
                }
            }
        else{
                JOptionPane.showMessageDialog(Main_Panel,
                            "Please select a room or object!",
                            "Failed to add Attribute",
                            JOptionPane.WARNING_MESSAGE);
            }
    }//GEN-LAST:event_edit_StateActionPerformed

    private void create_TransitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_create_TransitionActionPerformed
        DefaultMutableTreeNode selectedNode = 
                (DefaultMutableTreeNode)Current_Game
                        .getLastSelectedPathComponent();
        Object o = ((Object)selectedNode.getUserObject());
        State end = null;
        State s = null;
        if(o.getCurrentState() == null){
            o.setState(new State(start_State.getText()));
            s = o.getCurrentState();
            end = o.findState(end_State.getText());
        }
        else{
            s = o.findState(start_State.getText());
            end = o.findState(end_State.getText());
        }
        
        if(s != null){
            if(end != null){
                s.addTransition(transition_Verb.getText(), end);
            }
            else{
                s.addTransition(transition_Verb.getText(), 
                        new State(end_State.getText()));
            }
            if(o instanceof Room){
                o.addVerb(new Verb(transition_Verb.getText(),
                    g.findRoomByName(object_Associated_Transition.getText()),
                    o));
            }
            else{
                o.addVerb(new Verb(transition_Verb.getText(), 
                        g.findObjectInRoomByName(
                        object_Associated_Transition.getText()), o));
            }
        }
        else if(o.getCurrentState() == null){
           State start = new State(start_State.getText());
           if(end != null){
                start.addTransition(transition_Verb.getText(), end);
                
            }
            else{
                start.addTransition(transition_Verb.getText(), 
                        new State(end_State.getText()));
            }
            if(o instanceof Room){
                o.addVerb(new Verb(transition_Verb.getText(),
                    g.findRoomByName(object_Associated_Transition.getText()),
                    o));
            }
            else{
                o.addVerb(new Verb(transition_Verb.getText(), 
                        g.findObjectInRoomByName(
                        object_Associated_Transition.getText()), o));
            }
        }
        else{
            JOptionPane.showMessageDialog(Main_Panel, 
                    "Please enter an exsiting state for Start state!", 
                    "Failed to add Transition", JOptionPane.WARNING_MESSAGE);
        }
        transition_Verb.setText("");
        end_State.setText("");
        start_State.setText("");
        
        Add_Transition_Window.setVisible(false);
        updateStateTable();
        updateTransitionTable();
    }//GEN-LAST:event_create_TransitionActionPerformed

    private void deleteStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteStateActionPerformed
        DefaultMutableTreeNode selectedNode = 
                (DefaultMutableTreeNode)Current_Game
                        .getLastSelectedPathComponent();
        if(selectedNode != null 
                && !(selectedNode.getUserObject() instanceof String)){
                int row = transition_Table.getSelectedRow();
                if(row >= 0){
                    String verb = transition_Table.getValueAt(row, 1)
                            .toString();
                    String end = transition_Table.getValueAt(row, 2)
                            .toString();
                    Object o = (Object)selectedNode.getUserObject();
                    o.deleteTransition(verb, end);
                    updateStateTable();
                    updateTransitionTable();
                }
                else{
                    JOptionPane.showMessageDialog(Main_Panel,
                            "Please select a transition!",
                            "Failed to edit Transition",
                            JOptionPane.WARNING_MESSAGE);
                }
            }
        else{
                JOptionPane.showMessageDialog(Main_Panel,
                            "Please select a room or object!",
                            "Failed to add Attribute",
                            JOptionPane.WARNING_MESSAGE);
            }
    }//GEN-LAST:event_deleteStateActionPerformed

    private void add_conditionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_conditionActionPerformed
        Add_Condition_Window.setVisible(true);
        condition_Create.setVisible(true);
        condition_Save.setVisible(false);
    }//GEN-LAST:event_add_conditionActionPerformed

    private void cancel_TransitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel_TransitionActionPerformed
        transition_Verb.setText("");
        end_State.setText("");
        start_State.setText("");
        object_Associated_Transition.setText("");
        previous_Start.setText("");
        previous_Verb.setText("");
        Add_Transition_Window.setVisible(false);
    }//GEN-LAST:event_cancel_TransitionActionPerformed

    private void condition_CreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_condition_CreateActionPerformed
        DefaultMutableTreeNode selectedNode = 
                (DefaultMutableTreeNode)Current_Game
                        .getLastSelectedPathComponent();
        if(selectedNode != null 
                && !(selectedNode.getUserObject() instanceof String)){
            int row = transition_Table.getSelectedRow();
            condition_Attribute.setVisible(true);
            condition_Associated_Object.setVisible(true);
            Object  o = (Object)selectedNode.getUserObject();
            Transition t = o.findTransition(transition_Table.getValueAt(row, 1)
                    .toString(), transition_Table.getValueAt(row, 2)
                            .toString());
            
            String name = condition_Name.getText();
            String type = condition_Type.getSelectedItem().toString();
            String att = condition_Attribute.getText();
            double value;
            Object owner = null;
            for(Room r: g.getRooms()){
                owner = g.findObject(r, o);
                if(owner != null){
                    break;
                }
            }
            
            if(owner == null){
                JOptionPane.showMessageDialog(Main_Panel,
                            "Please re-enter associated object!",
                            "Failed to find associated object",
                            JOptionPane.WARNING_MESSAGE);
            }
            else{
                Attribute a = owner.findAttribute(att);
                if(a == null){
                    JOptionPane.showMessageDialog(Main_Panel,
                            "Please re-enter the attribute!",
                            "Failed to find attribute",
                            JOptionPane.WARNING_MESSAGE);
                }
                else{
                    Condition.Type con_type;
                    Condition c = null;
                    switch(type){
                        case "Boolean":
                            con_type = Condition.Type.BOOLEAN;
                            String bool_con = condition_value_bool
                                    .getSelectedItem().toString();
                            if(bool_con.equals("true")){
                                c = new Condition(name, a, true);
                            }
                            else{
                                c = new Condition(name, a, false);
                            }
                            break;
                            
                        case "Numeric equal":
                            value = Double.parseDouble(
                                condition_Value.getText());
                            con_type = Condition.Type.NUMERICEQ;
                            c = new Condition(name, a, value, 0);
                            break;
                        case "Numeric bigger than":
                            value = Double.parseDouble(
                                condition_Value.getText());
                            con_type = Condition.Type.NUMERICBT;
                            c = new Condition(name, a, value, 1);
                            break;
                        case "Numeric smaller than":
                            value = Double.parseDouble(
                                condition_Value.getText());
                            con_type = Condition.Type.NUMERICST;
                            c = new Condition(name, a, value, -1);
                            break;
                        default:
                            JOptionPane.showMessageDialog(Main_Panel,
                                "Please re-enter the condition type!",
                                "Failed to recognise type",
                                JOptionPane.WARNING_MESSAGE);
                            break;
                    }
                    t.addCondition(c);
                    updateConditionTable(t);
                    Add_Condition_Window.setVisible(false);
                    condition_Name.setText("");
                    condition_Value.setText("");
                    condition_Attribute.setText("");
                    condition_Associated_Object.setText("");
                }
            }
            updateConditionTable(t);
        }
        else{
            JOptionPane.showMessageDialog(Main_Panel,
                            "Please select a room or object!",
                            "No object found!",
                            JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_condition_CreateActionPerformed

    private void condition_TypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_condition_TypeActionPerformed
        String type = condition_Type.getSelectedItem().toString();
        if(type.equals("Boolean")){
            condition_Value.setVisible(false);
            condition_value_bool.setVisible(true);
        }
        else{
            condition_Value.setVisible(true);
            condition_value_bool.setVisible(false);
        }
    }//GEN-LAST:event_condition_TypeActionPerformed

    private void delete_conditionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_delete_conditionMouseClicked
        DefaultMutableTreeNode selectedNode = 
                (DefaultMutableTreeNode)Current_Game
                        .getLastSelectedPathComponent();
        if(selectedNode != null 
                && !(selectedNode.getUserObject() instanceof String)){
            int row = condition_Table.getSelectedRow();
            Object o = (Object)selectedNode.getUserObject();
            Transition t = o.findTransition(transition_Table.getValueAt(row, 1)
                            .toString(), transition_Table.getValueAt(row, 2)
                            .toString());
            if(row >= 0 && t != null){
                if(!t.deleteCondition(condition_Table.getValueAt(row, 0)
                        .toString())){
                    JOptionPane.showMessageDialog(Main_Panel,
                            "Please select a condition not found!",
                            "Failed to delete condition",
                            JOptionPane.WARNING_MESSAGE);
                }
                else{
                    updateConditionTable(t);
                }
            }
            else{
                JOptionPane.showMessageDialog(Main_Panel,
                            "Please select a condition to delete!",
                            "Failed to delete condition",
                            JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_delete_conditionMouseClicked

    /**
     * Updates the exit table in the edit screen given the room
     * @param r Room to list out the exits
     */
    private void updateExitTable(Room r){
        DefaultTableModel room_exits = (DefaultTableModel) Exits.getModel();
        room_exits.setRowCount(0);
        for(Exit e:r.getExit()){
            room_exits.addRow(new String[]{e.takeExit().getName(), e.getName()});
        }
        jScrollPane6.setViewportView(Exits);
    }
    
    private void updateConditionTable(Transition t){
        DefaultTableModel conditions = (DefaultTableModel) 
                condition_Table.getModel();
        conditions.setRowCount(0);
        for(Condition c: t.getConditions()){
            if(c.getType() == Condition.Type.BOOLEAN){
                conditions.addRow(new String[]{c.getName(), 
                    c.getAtt().getName(), String.valueOf(c.getValueBool())});
            }
            else{
                conditions.addRow(new String[]{c.getName(), 
                    c.getAtt().getName(), String.valueOf(c.getValueAmt())});
            }
        }
    }
    
    /**
     * Outputs the attribute of the most recently selected Object
     */
    private void updateAttributeTable(){
        DefaultMutableTreeNode selectedNode = 
                (DefaultMutableTreeNode)Current_Game
                        .getLastSelectedPathComponent();
        DefaultTableModel attributes = (DefaultTableModel) att_table.getModel();
        attributes.setRowCount(0);
        if(!(selectedNode.getUserObject() instanceof String)){
            Object r = (Object)selectedNode.getUserObject();
            LinkedList<Attribute> a = r.getAttributes();
            for(Attribute att: a){
                if(att instanceof Number_Attribute){
                    attributes.addRow(new String[]{att.getName(), "Number", "0",
                        att.getVerb().getName()});
                }
                else{
                    attributes.addRow(new String[]{att.getName(), 
                        "Boolean", "0", att.getVerb().getName()});
                }
            }
        }
    }
    
    /**
     * Outputs the states of the most recently selected Object
     */
    private void updateStateTable(){
        DefaultMutableTreeNode selectedNode = 
                (DefaultMutableTreeNode)Current_Game
                        .getLastSelectedPathComponent();
        DefaultTableModel states = 
                (DefaultTableModel) states_Table.getModel();
        states.setRowCount(0);
        if(!(selectedNode.getUserObject() instanceof String)){
            Set<State> allState = ((Object)selectedNode.getUserObject())
                        .getAllStates();
            for(State s: allState){
                states.addRow(new String[]{s.getName(), 
                    Integer.toString(s.getTransition().size())});
            }
        }
    }
    
    /**
     * Outputs the list of transitions of the most recently selected Object
     */
    private void updateTransitionTable(){
        DefaultMutableTreeNode selectedNode = 
                (DefaultMutableTreeNode)Current_Game
                        .getLastSelectedPathComponent();
        DefaultTableModel transitions = 
                (DefaultTableModel) transition_Table.getModel();
        transitions.setRowCount(0);
        if(!(selectedNode.getUserObject() instanceof String)){
            Set<State> allState = ((Object)selectedNode.getUserObject())
                    .getAllStates();
            for(State s: allState){
                for(Transition t: s.getTransition()){
                    transitions.addRow(new String[]{s.getName(), t.getAction(), 
                        t.getEndState().getName()});
                }
            }
        }
    }
    
    /**
     * Updates the game structure of all it's objects
     */
    private void updateTree(){
    DefaultMutableTreeNode game = new DefaultMutableTreeNode("Game");
    for(Room r: g.getRooms()){
        DefaultMutableTreeNode roomNode = new DefaultMutableTreeNode(r);
        game.add(roomNode);
        DefaultMutableTreeNode objNode;
        for(Object o: r.getObject()){
            objNode = new DefaultMutableTreeNode(o);
            if(o instanceof Container){
                Container cont = (Container)o;
                for(Object c:cont.getObjects()){
                    objNode.add(new DefaultMutableTreeNode(c));
                }
            }
            else if(o instanceof Player){
                Player ply = (Player) o;
                for(Object p: ply.getItems()){
                    objNode.add(new DefaultMutableTreeNode(p));
                }
            }
            roomNode.add(objNode);
        }
    game.add(roomNode);
    }
    Current_Game = new JTree(game);
    Current_Game.setFont(new java.awt.Font("Tahoma", 0, 25)); // NOI18N
        Current_Game.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                Current_GameValueChanged(evt);
            }
        });
    expandAll(Current_Game);
    jScrollPane5.setViewportView(Current_Game);
    }
    
    /**
     * Expands a tree
     * @param tree Tree to be expanded
     */
    public void expandAll(JTree tree) {
    TreeNode root = (TreeNode) tree.getModel().getRoot();
    expandAll(tree, new TreePath(root));
  }

    /**
     * Recursively expands a tree 
     * @param tree Tree to be expanded
     * @param parent Parent of the tree path
     */
    private void expandAll(JTree tree, TreePath parent) {
        TreeNode node = (TreeNode) parent.getLastPathComponent();
        if (node.getChildCount() >= 0) {
          for (Enumeration e = node.children(); e.hasMoreElements();) {
            TreeNode n = (TreeNode) e.nextElement();
            TreePath path = parent.pathByAddingChild(n);
            expandAll(tree, path);
          }
        }
        tree.expandPath(parent);
      }
    

   
    public static void main(String args[]) {
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main_Edit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main_Edit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main_Edit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main_Edit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main_Edit().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame Add_Attribute_Window;
    private javax.swing.JFrame Add_Condition_Window;
    private javax.swing.JFrame Add_Transition_Window;
    private javax.swing.JTree Current_Game;
    private javax.swing.JTable Exits;
    private javax.swing.JPanel Main_Panel;
    private javax.swing.JDialog Object_Type;
    private javax.swing.JButton addState;
    private javax.swing.JButton add_attribute;
    private javax.swing.JButton add_condition;
    private javax.swing.JLabel associated_object_label;
    private javax.swing.JLabel associated_verb_label1;
    private javax.swing.JComboBox<String> att_def_bool;
    private javax.swing.JTextField att_def_num;
    private javax.swing.JTable att_table;
    private javax.swing.JLabel attribute_Name_label;
    private javax.swing.JLabel attribute_label;
    private javax.swing.JTextField attribute_name;
    private javax.swing.JComboBox<String> attribute_type;
    private javax.swing.JLabel attribute_type_label;
    private javax.swing.JButton cancel_Attribute;
    private javax.swing.JButton cancel_Transition;
    private javax.swing.JTextField condition_Associated_Object;
    private javax.swing.JTextField condition_Attribute;
    private javax.swing.JButton condition_Cancel;
    private javax.swing.JButton condition_Create;
    private javax.swing.JTextField condition_Name;
    private javax.swing.JButton condition_Save;
    private javax.swing.JTable condition_Table;
    private javax.swing.JComboBox<String> condition_Type;
    private javax.swing.JTextField condition_Value;
    private javax.swing.JLabel condition_attribute_label;
    private javax.swing.JLabel condition_attribute_object_label;
    private javax.swing.JLabel condition_list_label;
    private javax.swing.JLabel condition_name_label;
    private javax.swing.JLabel condition_type_label;
    private javax.swing.JComboBox<String> condition_value_bool;
    private javax.swing.JLabel condition_value_label;
    private javax.swing.JButton create_Transition;
    private javax.swing.JButton create_attribute_button;
    private javax.swing.JButton create_exit;
    private javax.swing.JPanel create_exit_form;
    private javax.swing.JPanel create_exit_form1;
    private javax.swing.JButton delete;
    private javax.swing.JButton deleteState;
    private javax.swing.JButton delete_attribute;
    private javax.swing.JButton delete_condition;
    private javax.swing.JTextArea description;
    private javax.swing.JButton edit_State;
    private javax.swing.JTextField end_State;
    private javax.swing.JLabel end_State_Label;
    private javax.swing.JPanel exit;
    private javax.swing.JTextField exit_name;
    private javax.swing.JTextField exit_room;
    private javax.swing.JTabbedPane info;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem menu_File_Open;
    private javax.swing.JMenuItem menu_File_Save;
    private javax.swing.JComboBox<String> num_att_IncDec;
    private javax.swing.JTextField num_att_amt;
    private javax.swing.JLabel num_att_amt_label;
    private javax.swing.JLabel num_att_label;
    private javax.swing.JButton object;
    private javax.swing.JTextPane objectName;
    private javax.swing.JTextField object_Associated_Transition;
    private javax.swing.JLabel object_associated_label_trans;
    private javax.swing.JTextField object_name;
    private javax.swing.JLabel object_room_label;
    private javax.swing.JTextField object_room_name;
    private javax.swing.JButton play_game;
    private javax.swing.JTextField previous_Start;
    private javax.swing.JTextField previous_Verb;
    private javax.swing.JButton remove_exit;
    private javax.swing.JTextField remove_exit_name;
    private javax.swing.JButton room;
    private javax.swing.JCheckBox same_room;
    private javax.swing.JButton save_Transition;
    private javax.swing.JTextField start_State;
    private javax.swing.JLabel start_State_Label;
    private javax.swing.JLabel starting_val;
    private javax.swing.JLabel state_window_title;
    private javax.swing.JTable states_Table;
    private javax.swing.JTable transition_Table;
    private javax.swing.JTextField transition_Verb;
    private javax.swing.JLabel transition_verb_label;
    private javax.swing.JTextField verb_name;
    // End of variables declaration//GEN-END:variables
}
